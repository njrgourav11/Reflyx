/**
 * Completion Provider for AI Coding Assistant
 * Provides AI-powered code completions
 */

import * as vscode from 'vscode';
import { ApiClient } from '../services/ApiClient';
import { Logger } from '../utils/Logger';

export class CompletionProvider implements vscode.CompletionItemProvider {
    private logger: Logger;

    constructor(private apiClient: ApiClient) {
        this.logger = new Logger('CompletionProvider');
    }

    async provideCompletionItems(
        document: vscode.TextDocument,
        position: vscode.Position,
        token: vscode.CancellationToken,
        context: vscode.CompletionContext
    ): Promise<vscode.CompletionItem[]> {
        try {
            // Get current line and context
            const line = document.lineAt(position);
            const prefix = line.text.substring(0, position.character);
            
            // Skip if not enough context
            if (prefix.trim().length < 2) {
                return [];
            }

            // Get surrounding context
            const startLine = Math.max(0, position.line - 10);
            const endLine = Math.min(document.lineCount - 1, position.line + 5);
            const contextRange = new vscode.Range(startLine, 0, endLine, document.lineAt(endLine).text.length);
            const contextCode = document.getText(contextRange);

            // Generate completion
            const response = await this.apiClient.generateCode({
                prompt: `Complete this ${document.languageId} code:\n\n${contextCode}\n\nComplete the line: ${prefix}`,
                language: document.languageId
            });

            if (!response.generated_code) {
                return [];
            }

            // Create completion item
            const completion = new vscode.CompletionItem(
                response.generated_code.split('\n')[0],
                vscode.CompletionItemKind.Text
            );

            completion.detail = 'AI Generated';
            completion.documentation = new vscode.MarkdownString('Generated by AI Coding Assistant');
            completion.insertText = response.generated_code;

            return [completion];

        } catch (error) {
            this.logger.error('Error providing completions:', error);
            return [];
        }
    }
}
